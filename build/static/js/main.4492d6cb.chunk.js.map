{"version":3,"sources":["Components/Filter.js","Components/PersonForm.js","Components/Persons.js","Components/Notification.js","Services/Contacts.js","App.js","serviceWorker.js","index.js"],"names":["Filter","props","value","filter","onChange","PersonForm","onSubmit","newName","handleNewName","newNumber","handleNewNumber","type","Persons","namesToShow","map","person","key","name","number","onClick","onDelete","id","Notification","message","style","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","baseUrl","axios","get","then","response","data","newObject","post","request","delete","console","log","put","App","useState","persons","setPersons","setNewName","setNewNumber","setFilter","notificationMessage","setNotificationMessage","useEffect","contactService","allContacts","onUpdateNumber","find","p","returnedPerson","setTimeout","catch","error","length","toUpperCase","includes","event","target","preventDefault","nameObject","some","window","confirm","retunedContact","concat","contact","deletedContact","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4492d6cb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Filter = (props) => {\r\n    const value = props.filter\r\n    const onChange = props.onChange\r\n    return (\r\n        <div>\r\n            filter shown with: <input\r\n            value={value}\r\n            onChange={onChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Filter","import React from 'react';\r\n\r\nconst PersonForm = (props) => {\r\n   \r\n    return (\r\n        <div>\r\n            <form onSubmit={props.onSubmit}>\r\n                <div>\r\n                    name: <input\r\n                    value={props.newName}\r\n                    onChange={props.handleNewName} />\r\n                    number: <input\r\n                    value={props.newNumber}\r\n                    onChange={props.handleNewNumber} />\r\n                </div>\r\n            <div>\r\n                <button type=\"submit\">add</button>\r\n            </div>\r\n            \r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PersonForm","import React from 'react';\r\n\r\nconst Persons = (props) => {\r\n\r\n    const namesToShow = props.namesToShow\r\n    \r\n    return (\r\n        <div>\r\n            <ul>\r\n                {namesToShow.map((person) =>\r\n                <li key={person.name}> {person.name} {person.number} <button onClick={ () => props.onDelete(person.id) }>Delete</button> </li>)}             \r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Persons","import React from 'react'\r\n\r\nconst Notification = ( {message}) => {\r\n\r\n        \r\n    const notificationStyle = {\r\n          \r\n        color: \"Green\",\r\n        background: \"lightgrey\",\r\n        fontSize: 20,\r\n        borderStyle: \"solid\",\r\n        borderRadius: 5,\r\n        padding: 10,\r\n        marginBottom: 10\r\n    }\r\n\r\n    if (message=== null) {\r\n      return null\r\n    }\r\n\r\n    return (\r\n      <div style={notificationStyle} > \r\n      {message} \r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default Notification","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst deleteObject = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => request.data)\r\n}\r\n\r\nconst updateNumber = (id, newObject) => {\r\n    console.log(id)\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n  }\r\n\r\nexport default { getAll, create, deleteObject, updateNumber}","import React, { useState, useEffect } from 'react'\nimport Filter from './Components/Filter'\nimport PersonForm from './Components/PersonForm'\nimport Persons from './Components/Persons'\nimport Notification from './Components/Notification'\nimport contactService from './Services/Contacts'\n\nconst App = () => {\n\n  const [ persons, setPersons] = useState([]) //Kontaktien tila\n  const [ newName, setNewName ] = useState(\"\") //Nimikentän tila\n  const [ newNumber, setNewNumber ] = useState(\"\") //Numerokentän tila\n  const [ filter, setFilter ] = useState(\"\") //Hakukentän tila\n  const [ notificationMessage, setNotificationMessage ] = useState(null)\n\n\n  // Datan hakeminen palvelimelta useEffect hookilla\n  useEffect(() => {\n    contactService.getAll().then(allContacts => {\n      setPersons(allContacts)\n      console.log(allContacts)\n    })\n  }, [])\n\n\n  const addName = (event) => {\n    event.preventDefault()\n    \n    const nameObject = {\n      name: newName,\n      number: newNumber\n    }\n\n    if (persons.some(person => person.name === newName)) {\n\n      if (window.confirm(`${newName} is already added to phonebook, replace the old numer with a new one?`)){\n        const id = persons.find(person => person.name === newName).id\n        \n        onUpdateNumber(id)\n        setNewName('')\n        setNewNumber('')\n    }\n      \n    }\n    else contactService.create(nameObject).then(retunedContact => {\n      setPersons(persons.concat(retunedContact))\n      setNewName('')\n      setNewNumber('')\n\n      \n      setNotificationMessage(`Added ${nameObject.name} `)\n      setTimeout(() => {\n        setNotificationMessage(null)\n      }, 5000)\n    }\n    )\n  }\n\n  const onUpdateNumber = (id) => {\n\n    const person = persons.find(p => p.id === id)\n    const newObject = {...person, number: newNumber}\n\n    contactService\n      .updateNumber(id, newObject)\n      .then(returnedPerson => {\n\n        setPersons(persons.map(person => person.id !== id ? person : returnedPerson))\n        \n        setNotificationMessage(\"Number updated!\")\n        setTimeout(() => {\n          setNotificationMessage(null)\n        }, 5000)\n        \n      })\n      .catch(error => {\n\n        setNotificationMessage(`The information for ${person.name} has already been deleted from the phonebook`)\n        setTimeout(() => {\n          setNotificationMessage(null)\n        }, 5000)\n\n      })\n  }\n\n  const onDeleteName = (id) => {\n  \n    const contact = persons.find(person => person.id === id)\n\n    if (window.confirm(\"Delete \" + contact.name + \"?\")){\n      contactService\n        .deleteObject(contact.id)\n        .then(response => {\n          setPersons(persons.filter(deletedContact => deletedContact.id !== id))\n        })\n        \n      setNotificationMessage(`${contact.name} deleted from phonebook`)\n      setTimeout(() => {\n        setNotificationMessage(null)\n      }, 5000)\n    }\n}\n\n\n\n  const handleNewName = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNewNumber = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleNewFilter = (event) => {\n    setFilter(event.target.value)\n  }\n\n  const namesToShow = (filter.length === 0)\n    ? persons\n    : persons.filter(person => person.name.toUpperCase().includes(filter.toUpperCase()))\n\n  return (\n    \n    <div>\n\n      <h1>Phonebook</h1>\n\n\n      <Notification message={notificationMessage} />\n\n      <Filter \n      value={filter}\n      onChange={handleNewFilter} />\n\n      <h2>Add a new contact</h2>\n\n      <PersonForm \n      newName={newName} \n      newNumber={newNumber} \n      onSubmit={addName}\n      handleNewName={handleNewName}\n      handleNewNumber={handleNewNumber} />\n\n      <h2>Numbers</h2>\n\n      <Persons\n      namesToShow={namesToShow}\n      onDelete={onDeleteName} \n      />\n\n    </div>\n  )\n\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}